/*You are given a string s consisting only lowercase alphabets and an integer k. Your task is to find the length of the longest substring that contains exactly
k distinct characters.

Note : If no such substring exists, return -1. 

Examples:

Input: s = "aabacbebebe", k = 3
Output: 7
Explanation: The longest substring with exactly 3 distinct characters is "cbebebe", which includes 'c', 'b', and 'e'.*/

class Solution {
  public:
    int longestKSubstr(string &s, int k) {
     int n=s.size();
     map<char,int>mp;
    int l=0,r=0;int ans=-1;
    while(r<n){
        mp[s[r]]++;
        while(mp.size()>k){
            mp[s[l]]--;
            if(mp[s[l]]==0) mp.erase(s[l]);
            l++;
        }if(mp.size()==k)
        ans=max(ans,r-l+1);
        r++;
    }return ans;
    }
};
